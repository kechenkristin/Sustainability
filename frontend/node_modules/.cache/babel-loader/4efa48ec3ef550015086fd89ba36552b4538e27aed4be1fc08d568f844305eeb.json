{"ast":null,"code":"import _regeneratorRuntime from\"/Users/arseniikhmara/Documents/selfCode/Sustainability/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/arseniikhmara/Documents/selfCode/Sustainability/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/arseniikhmara/Documents/selfCode/Sustainability/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import classes from\"./chatAdvices.module.css\";import Advices from\"./advices\";import secret from\"../secrets/gptKey.txt\";import{useState,useEffect}from\"react\";import axios from\"axios\";import sendButton from\"../assets/sendIcon.png\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ChatAdvices=function ChatAdvices(){var response='hello';var _useState=useState(''),_useState2=_slicedToArray(_useState,2),textData=_useState2[0],setTextData=_useState2[1];var _useState3=useState(\"You can write any action and you will get advices how to make it more sustainable! \\n For example: i'm going to drink water! \"),_useState4=_slicedToArray(_useState3,2),adviceText=_useState4[0],setAdviceText=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),userInput=_useState6[0],setUserInput=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isLoading=_useState8[0],setIsLoading=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),isActive=_useState10[0],setActive=_useState10[1];var fetchAdvice=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var requestBody,_response,advice;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:setIsLoading(true);requestBody={model:\"gpt-3.5-turbo\",messages:[{role:\"user\",content:'Act as a sustainability expert. There is a user that wants to do the action: '+userInput+\". Write exactly 4 advices how to make that action more sustainable.  Use statistic , examples and comparisons to make user motivated about following the advices. Try to sound less generic. Make these advices be numbered. \"+\"Make one advice be limited by 450 characters\"}]};_context.prev=2;_context.next=5;return axios.post(\"https://api.openai.com/v1/chat/completions\",requestBody,{headers:{\"Content-Type\":\"application/json\",\"Authorization\":\"Bearer \".concat(textData)}});case 5:_response=_context.sent;console.log(\"This is response\");advice=_response.data.choices[0].message.content;setAdviceText(advice);_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](2);console.error(\"Error fetching advice:\",_context.t0);case 14:_context.prev=14;setIsLoading(false);setActive(true);return _context.finish(14);case 18:case\"end\":return _context.stop();}},_callee,null,[[2,11,14,18]]);}));return function fetchAdvice(){return _ref.apply(this,arguments);};}();useEffect(function(){fetch(secret).then(function(response){return response.text();}).then(function(data){return setTextData(data);}).catch(function(error){return console.error('Error fetching text file:',error);});},[]);var handleInputChange=function handleInputChange(event){setUserInput(event.target.value);};return/*#__PURE__*/_jsxs(\"div\",{className:classes.chatItems,children:[isLoading?\"Loading...\":/*#__PURE__*/_jsx(Advices,{response:adviceText,active:isActive}),/*#__PURE__*/_jsxs(\"div\",{className:classes.submit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:userInput,onChange:handleInputChange,className:classes.input,placeholder:\"Enter your request\"}),/*#__PURE__*/_jsxs(\"button\",{className:classes.fetchButton,onClick:fetchAdvice,children:[/*#__PURE__*/_jsx(\"img\",{src:sendButton,className:classes.sendButton}),\" \"]})]})]});};export default ChatAdvices;","map":{"version":3,"names":["React","classes","Advices","secret","useState","useEffect","axios","sendButton","jsx","_jsx","jsxs","_jsxs","ChatAdvices","response","_useState","_useState2","_slicedToArray","textData","setTextData","_useState3","_useState4","adviceText","setAdviceText","_useState5","_useState6","userInput","setUserInput","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","isActive","setActive","fetchAdvice","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","requestBody","_response","advice","wrap","_callee$","_context","prev","next","model","messages","role","content","post","headers","concat","sent","console","log","data","choices","message","t0","error","finish","stop","apply","arguments","fetch","then","text","catch","handleInputChange","event","target","value","className","chatItems","children","active","submit","type","onChange","input","placeholder","fetchButton","onClick","src"],"sources":["/Users/arseniikhmara/Documents/selfCode/Sustainability/frontend/src/components/chatAdvices.js"],"sourcesContent":["import React from \"react\";\n\nimport classes from \"./chatAdvices.module.css\"\nimport Advices from \"./advices\";\nimport secret from \"../secrets/gptKey.txt\";\nimport {useState,useEffect} from \"react\";\nimport axios from \"axios\";\n\nimport sendButton from \"../assets/sendIcon.png\";\n\nconst ChatAdvices = () => {\n\n    let response = 'hello';\n    const [textData, setTextData] = useState('');\n    const [adviceText, setAdviceText] = useState(\"You can write any action and you will get advices how to make it more sustainable! \\n For example: i'm going to drink water! \");\n\n    const [userInput, setUserInput] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n    const [isActive, setActive] = useState(false);\n\n\n\n    const fetchAdvice = async () => {\n        setIsLoading(true);\n        const requestBody = {\n            model: \"gpt-3.5-turbo\",\n            messages: [{ role: \"user\", content: 'Act as a sustainability expert. There is a user that wants to do the action: '+userInput +\n            \". Write exactly 4 advices how to make that action more sustainable.  Use statistic , examples and comparisons to make user motivated about following the advices. Try to sound less generic. Make these advices be numbered. \" +\n                    \"Make one advice be limited by 450 characters\"}]\n\n        };\n\n        try {\n            const response = await axios.post(\"https://api.openai.com/v1/chat/completions\", requestBody, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${textData}`\n                }\n            });\n\n            console.log(\"This is response\")\n\n            const advice = response.data.choices[0].message.content;\n            setAdviceText(advice);\n        } catch (error) {\n            console.error(\"Error fetching advice:\", error);\n        }\n        finally {\n            setIsLoading(false);\n            setActive(true);\n        }\n    };\n\n    useEffect(() => {\n        fetch(secret)\n            .then((response) => response.text())\n            .then((data) => setTextData(data))\n            .catch((error) => console.error('Error fetching text file:', error));\n    }, []);\n\n    const handleInputChange = (event) => {\n        setUserInput(event.target.value);\n    };\n\n    return (\n        <div className={classes.chatItems}>\n            {isLoading ? \"Loading...\" : <Advices response={adviceText} active={isActive}>\n            </Advices>}\n\n            <div className={classes.submit}>\n                <input\n                    type=\"text\"\n                    value={userInput}\n                    onChange={handleInputChange}\n                    className={classes.input}\n                    placeholder=\"Enter your request\"\n                />\n                <button className={classes.fetchButton} onClick={fetchAdvice}><img src={sendButton} className={classes.sendButton}/> </button>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatAdvices;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
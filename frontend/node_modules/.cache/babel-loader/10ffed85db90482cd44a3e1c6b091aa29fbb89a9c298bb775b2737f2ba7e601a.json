{"ast":null,"code":"var _jsxFileName = \"/Users/arseniikhmara/Documents/selfCode/Sustainability/frontend/src/components/chatAdvices.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport classes from \"./chatAdvices.module.css\";\nimport Advices from \"./advices\";\nimport secret from \"../secrets/gptKey.txt\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport sendButton from \"../assets/sendIcon.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatAdvices = () => {\n  _s();\n  let response = 'hello';\n  const [textData, setTextData] = useState('');\n  const [adviceText, setAdviceText] = useState(\"You can write any action and you will get advices how to make it more sustainable! \\n For example: i'm going to drink water! \");\n  const [userInput, setUserInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isActive, setActive] = useState(false);\n  const fetchAdvice = async () => {\n    setIsLoading(true);\n    const requestBody = {\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"user\",\n        content: 'Act as a sustainability expert. There is a user that wants to do the action: ' + userInput + \". Write exactly 4 advices how to make that action more sustainable.  Use statistic , examples and comparisons to make user motivated about following the advices. Try to sound less generic. Make these advices be numbered.\"\n      }]\n    };\n    try {\n      const response = await axios.post(\"https://api.openai.com/v1/chat/completions\", requestBody, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${textData}`\n        }\n      });\n      console.log(\"This is response\");\n      const advice = response.data.choices[0].message.content;\n      setAdviceText(advice);\n    } catch (error) {\n      console.error(\"Error fetching advice:\", error);\n    } finally {\n      setIsLoading(false);\n      setActive(true);\n    }\n  };\n  useEffect(() => {\n    fetch(secret).then(response => response.text()).then(data => setTextData(data)).catch(error => console.error('Error fetching text file:', error));\n  }, []);\n  const handleInputChange = event => {\n    setUserInput(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.chatItems,\n    children: [isLoading ? \"Loading...\" : /*#__PURE__*/_jsxDEV(Advices, {\n      response: adviceText,\n      active: isActive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 41\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.submit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: handleInputChange,\n        className: classes.input,\n        placeholder: \"Enter your request\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.fetchButton,\n        onClick: fetchAdvice,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: sendButton,\n          className: classes.sendButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 79\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatAdvices, \"MnwITl1cIAZgdbRTBtnHZjBsGMk=\");\n_c = ChatAdvices;\nexport default ChatAdvices;\nvar _c;\n$RefreshReg$(_c, \"ChatAdvices\");","map":{"version":3,"names":["React","classes","Advices","secret","useState","useEffect","axios","sendButton","jsxDEV","_jsxDEV","ChatAdvices","_s","response","textData","setTextData","adviceText","setAdviceText","userInput","setUserInput","isLoading","setIsLoading","isActive","setActive","fetchAdvice","requestBody","model","messages","role","content","post","headers","console","log","advice","data","choices","message","error","fetch","then","text","catch","handleInputChange","event","target","value","className","chatItems","children","active","fileName","_jsxFileName","lineNumber","columnNumber","submit","type","onChange","input","placeholder","fetchButton","onClick","src","_c","$RefreshReg$"],"sources":["/Users/arseniikhmara/Documents/selfCode/Sustainability/frontend/src/components/chatAdvices.js"],"sourcesContent":["import React from \"react\";\n\nimport classes from \"./chatAdvices.module.css\"\nimport Advices from \"./advices\";\nimport secret from \"../secrets/gptKey.txt\";\nimport {useState,useEffect} from \"react\";\nimport axios from \"axios\";\n\nimport sendButton from \"../assets/sendIcon.png\";\n\nconst ChatAdvices = () => {\n\n    let response = 'hello';\n    const [textData, setTextData] = useState('');\n    const [adviceText, setAdviceText] = useState(\"You can write any action and you will get advices how to make it more sustainable! \\n For example: i'm going to drink water! \");\n\n    const [userInput, setUserInput] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n    const [isActive, setActive] = useState(false);\n\n\n\n    const fetchAdvice = async () => {\n        setIsLoading(true);\n        const requestBody = {\n            model: \"gpt-3.5-turbo\",\n            messages: [{ role: \"user\", content: 'Act as a sustainability expert. There is a user that wants to do the action: '+userInput +\n            \". Write exactly 4 advices how to make that action more sustainable.  Use statistic , examples and comparisons to make user motivated about following the advices. Try to sound less generic. Make these advices be numbered.\"}]\n        };\n\n        try {\n            const response = await axios.post(\"https://api.openai.com/v1/chat/completions\", requestBody, {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${textData}`\n                }\n            });\n\n            console.log(\"This is response\")\n\n            const advice = response.data.choices[0].message.content;\n            setAdviceText(advice);\n        } catch (error) {\n            console.error(\"Error fetching advice:\", error);\n        }\n        finally {\n            setIsLoading(false);\n            setActive(true);\n        }\n    };\n\n    useEffect(() => {\n        fetch(secret)\n            .then((response) => response.text())\n            .then((data) => setTextData(data))\n            .catch((error) => console.error('Error fetching text file:', error));\n    }, []);\n\n    const handleInputChange = (event) => {\n        setUserInput(event.target.value);\n    };\n\n    return (\n        <div className={classes.chatItems}>\n            {isLoading ? \"Loading...\" : <Advices response={adviceText} active={isActive}>\n            </Advices>}\n\n            <div className={classes.submit}>\n                <input\n                    type=\"text\"\n                    value={userInput}\n                    onChange={handleInputChange}\n                    className={classes.input}\n                    placeholder=\"Enter your request\"\n                />\n                <button className={classes.fetchButton} onClick={fetchAdvice}><img src={sendButton} className={classes.sendButton}/> </button>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatAdvices;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}